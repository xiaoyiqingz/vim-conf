" Plugins {

    " vim-colorschemes {
        if isdirectory(expand("~/.vim/plugged/vim-colorschemes"))
            color molokai
            "let g:molokai_original = 1
            "let g:rehash256 = 1
        endif
    "}

    " vim-trailing-whitespace {
        if isdirectory(expand("~/.vim/plugged/vim-trailing-whitespace"))
            nnoremap <Leader>xd :FixWhitespace<CR>

            let g:extra_whitespace_ignored_filetypes = ['markdown']
        endif
    " }

    " delimitMate {
        if isdirectory(expand("~/.vim/plugged/delimitMate"))
            let delimitMate_expand_cr=0
            " need to reload the file
            nnoremap <leader>D :let b:delimitMate_autoclose = 0<CR> :e<CR>
            nnoremap <leader>d :let b:delimitMate_autoclose = 1<CR> :e<CR>
        endif
    " }

    " vim-airline {
      if isdirectory(expand("~/.vim/plugged/vim-airline"))
          let t_Co=256
          let g:airline_theme="powerlineish"
          let g:Powerline_symbols="fancy"
          " use powerline font. If not, let g:airline_powerline_fonts=0
          let g:airline_powerline_fonts=1
          let g:airline#extensions#tabline#enabled=1
          let g:airline#extensions#tabline#buffer_nr_show=1
          let g:airline#extensions#whitespce#enabled=0
          let g:airline#extensions#whitespace#symbol='!'
          let g:airline#extensions#whitespace#mixed_indent_algo=2
          if !exists('g:airline_powerline_fonts')
              let g:airline_left_sep='>'
              let g:airline_right_sep='<'
          endif
      endif
    " }

    " vim-startify {
    if isdirectory(expand('~/.vim/plugged/vim-startify'))
        "let g:startify_custom_header = [
        "            \'                                                            _',
        "            \'                        ___ _ __   __ _  ___ ___     __   _(_)_ __ ___',
        "            \'                       / __| -_ \ / _- |/ __/ _ \____\ \ / / | -_ - _ \ ',
        "            \'                       \__ \ |_) | (_| | (_|  __/_____\ V /| | | | | | |',
        "            \'                       |___/ .__/ \__._|\___\___|      \_/ |_|_| |_| |_|',
        "            \'                           |_|',
        "            \]
        "let g:startify_custom_header = startify#fortune#cowsay()
        function! s:filter_header(lines) abort
            let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
            let centered_lines = map(copy(a:lines),
                \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
            return centered_lines
        endfunction
        let g:startify_custom_header = s:filter_header(startify#fortune#cowsay())
        let g:startify_change_to_vcs_root = 1

        "augroup SPACEVIM_START
        "    autocmd!
        "    autocmd VimEnter * if !argc() | Startify | endif
        "augroup END
        let g:startify_list_order = [
                    \ ['   Project:'],
                    \ 'bookmarks',
                    \ ['   Recent Files:'],
                    \ 'files',
                    \ ['   Dirs:'],
                    \ 'dir',
                    \ ['   Sessions:'],
                    \ 'sessions',
                    \ ['   Commands:'],
                    \ 'commands',
                    \ ]

        nnoremap <leader>st :Startify<CR>
    endif
    " }

    " vim-ctrlp {
    "    if isdirectory(expand("~/.vim/plugged/ctrlp.vim"))
    "        let g:ctrlp_working_path_mode = 'ra'    " search for nearest ancestor like .git, .hg, and the directory of the current file
    "        "let g:ctrlp_match_window_bottom = 0     " show the match window at the top of the screen
    "        let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
    "        let g:ctrlp_by_filename = 1
    "        let g:ctrlp_max_height = 30             " maxiumum height of match window
    "        let g:ctrlp_switch_buffer = 'et'        " jump to a file if it's open already
    "        let g:ctrlp_use_caching = 1             " enable caching
    "        let g:ctrlp_clear_cache_on_exit=0       " speed up by not removing clearing cache evertime
    "        let g:ctrlp_mruf_max = 250              " number of recently opened files
    "        let g:ctrlp_custom_ignore = {
    "                    \ 'dir':  '\v[\/]\.(git|hg|svn|build)$',
    "                    \ 'file': '\v\.(exe|so|dll)$',
    "                    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    "                    \ }
    "        let g:ctrlp_regexp = 1
    "        " 如果ag可用，使用ag替换grep进行搜索
    "        if executable('ag')
    "            " Use Ag over Grep
    "            set grepprg=ag\ --nogroup\ --nocolor
    "            " Use ag in CtrlP for listing files.
    "            let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    "            " Ag is fast enough that CtrlP doesn't need to cache
    "            let g:ctrlp_use_caching = 0
    "        else
    "            let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
    "        endif

    "         nnoremap <C-X> :CtrlPBuffer<CR>
    "         nnoremap <C-L> :CtrlPMRU<CR>
    "    endif
     " }

     " tagbar {
         if isdirectory(expand("~/.vim/plugged/tagbar"))
             let g:tagbar_autofocus = 1
             let g:tagbar_sort = 0
             let g:tagbar_show_linenumbers = 1
             nnoremap <F6> :TagbarToggle<CR>
             inoremap <F6> <ESC>:TagbarToggle<CR>

             let g:tagbar_type_go = {
                         \ 'ctagstype' : 'go',
                         \ 'kinds'     : [
                         \ 'p:package',
                         \ 'i:imports:1',
                         \ 'c:constants',
                         \ 'v:variables',
                         \ 't:types',
                         \ 'n:interfaces',
                         \ 'w:fields',
                         \ 'e:embedded',
                         \ 'm:methods',
                         \ 'r:constructor',
                         \ 'f:functions'
                         \ ],
                         \ 'sro' : '.',
                         \ 'kind2scope' : {
                         \ 't' : 'ctype',
                         \ 'n' : 'ntype'
                         \ },
                         \ 'scope2kind' : {
                         \ 'ctype' : 't',
                         \ 'ntype' : 'n'
                         \ },
                         \ 'ctagsbin'  : 'gotags',
                         \ 'ctagsargs' : '-sort -silent'
                         \ }
             let g:tagbar_type_php = {
                         \ 'ctagsbin'  : 'phpctags',
                         \ 'ctagsargs' : '-f -',
                         \ 'kinds'     : [
                         \ 'd:Constants:0:0',
                         \ 'v:Variables:0:0',
                         \ 'f:Functions:1',
                         \ 'i:Interfaces:0',
                         \ 'c:Classes:0',
                         \ 'p:Properties:0:0',
                         \ 'm:Methods:1',
                         \ 'n:Namespaces:0',
                         \ 't:Traits:0',
                         \ ],
                         \ 'sro'        : '::',
                         \ 'kind2scope' : {
                         \ 'c' : 'class',
                         \ 'm' : 'method',
                         \ 'f' : 'function',
                         \ 'i' : 'interface',
                         \ 'n' : 'namespace',
                         \ 't' : 'trait',
                         \ },
                         \ 'scope2kind' : {
                         \ 'class'     : 'c',
                         \ 'method'    : 'm',
                         \ 'function'  : 'f',
                         \ 'interface' : 'i',
                         \ 'namespace' : 'n',
                         \ 'trait'     : 't',
                         \ }
                         \ }
         endif
     " }

     " tagbar-phpctags {
         if isdirectory(expand("~/.vim/plugged/tabular"))
            let g:tagbar_phpctags_bin = '~/build-ext/phpctags'
         endif
     " }

    " tabular {
         if isdirectory(expand("~/.vim/plugged/tabular"))
             nnoremap <Leader>t= :Tabularize /=<CR>
             vnoremap <Leader>t= :Tabularize /=<CR>
             nnoremap <Leader>t\| :Tabularize /\|<CR>
             vnoremap <Leader>t\| :Tabularize /\|<CR>
             nnoremap <Leader>t: :Tabularize /:\zs<CR>
             vnoremap <Leader>t: :Tabularize /:\zs<CR>
        endif
    " }

    " YouCompleteMe {
        if isdirectory(expand("~/.vim/plugged/YouCompleteMe"))
            inoremap <expr> <CR>  pumvisible() ? "\<C-y>" : "\<CR>"
            let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
            " 不显示开启vim时检查ycm_extra_conf文件的信息
            let g:ycm_confirm_extra_conf=0
            " 开启基于tag的补全，可以在这之后添加需要的标签路径
            let g:ycm_collect_identifiers_from_tags_files = 1
            " 设置error和warning的提示符，如果没有设置，ycm会以syntastic的
            " g:syntastic_warning_symbol 和 g:syntastic_error_symbol这两个为准
            " let g:ycm_error_symbol='✖'
            " let g:ycm_warning_symbol='⚠⚠'
            " 不设置该选项YCM会经常crashed
            " python版本应当与编译YCM时的Python版本一致
            " 建议使用Python3和绝对路径避免不必要的问题
            let g:ycm_path_to_python_interpreter='/usr/local/bin/python3.8'
            " 输入第2个字符开始补全
            let g:ycm_min_num_of_chars_for_completion=2
            " 禁止缓存匹配项,每次都重新生成匹配项
            let g:ycm_cache_omnifunc=0
            " 开启语义补全
            let g:ycm_seed_identifiers_with_syntax=1
            " 在注释输入中也能补全
            let g:ycm_complete_in_comments=1
            " 在字符串输入中也能补全
            let g:ycm_complete_in_strings=1
            " 注释和字符串中的文字也会被收入补全
            let g:ycm_collect_identifiers_from_comments_and_strings=0
            " 设置在下面几种格式的文件上屏蔽ycm
            let g:ycm_filetype_blacklist={
                      \ 'tagbar' : 1,
                      \ 'nerdtree' : 1,
                      \ 'markdown' : 1,
                      \ 'unite' : 1,
                      \ 'text' : 1,
                      \ 'csv' : 1,
                      \}
            " 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
            let g:ycm_key_invoke_completion='<M-;>'
            " 完成补全后关闭preview窗口
            let g:ycm_autoclose_preview_window_after_completion = 1

           " turn off YCM
           nnoremap <leader>Y :let g:ycm_auto_trigger=0<CR>
           " turn on YCM
           nnoremap <leader>y :let g:ycm_auto_trigger=1<CR>
        endif
    " }

    " syntastic {
         if isdirectory(expand("~/.vim/plugged/syntastic"))
             " 每次调用:SyntasticSetLocList ，将错误覆盖 **quickfix**
             let g:syntastic_always_populate_loc_list=1
             " 自动拉起/关闭错误窗口，不需要手动调用:Errors
             let gysyntastic_auto_loc_list=1
             " 打开文件的时候做检查
             let g:syntastic_check_on_open=1
             " 每次保存的时候做检查
             let g:syntastic_check_on_wq=1
             let g:syntastic_enable_highlighting=1
             let g:jyntastic_python_checkers=['pyflakes']           " 使用pyflakes 比pylint快, 需要pip安装pyflakes，
             let g:syntastic_javascript_checkers=['jsl', 'jshint']  " npm install jsl jshint
             let g:syntastic_html_checkers=['tidy', 'jshint']       " brew install tidy-html5
             let g:syntastic_php_checkers=['php', 'phpcs']
             let g:syntastic_go_checkers=['golangci_lint', 'gofmt', 'go']
             let g:syntastic_php_phpcs_args="--standard=~/code-standards/phpcs_st.xml"
             " 修改高亮的背景色
             hi SyntasticErrorSign guifg=red guibg=black
             " syntastic信息加入状态栏
             " set statusline+=%{SyntasticStatusLineFlag()}
             " 配置error-sign
             let g:syntastic_error_symbol='✗'
             let g:syntastic_warning_symbol='⚠'
             let g:syntastic_aggregate_errors=1

             nnoremap <Leader>ts :SyntasticToggleMode<CR>
         endif
    "}

    " for Ultisnips {
        if isdirectory(expand("~/.vim/plugged/ultisnips"))
            " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
            let g:UltiSnipsExpandTrigger="<c-e>"
            let g:UltiSnipsJumpForwardTrigger="<c-e>"
            let g:UltiSnipsJumpBackwardTrigger="<c-b>"

            " If you want :UltiSnipsEdit to split your window.
            let g:UltiSnipsEditSplit="vertical"
        endif
    " }

    " for vim-phpqa {
        let g:phpqa_codesniffer_autorun=1
        let g:phpqa_codesniffer_args = "--standard=~/code-standards/phpcs_st.xml"
    " }

    " for leaderF {
        if isdirectory(expand("~/.vim/plugged/leaderf"))
            let g:Lf_RootMarkers = ['.git']
            let g:Lf_WorkingDirectoryMode = 'ac'
            let g:Lf_WindowPosition = 'popup'
            let g:Lf_PreviewInPopup = 1
            let g:Lf_UseMemoryCache = 0

            let g:Lf_PreviewHorizontalPosition='right'
            let g:Lf_GtagsAutoGenerate = 1
            let g:Lf_Gtagslabel = 'native-pygments'
            let g:Lf_WindowHeight = 0.2
            let g:Lf_WildIgnore = {
                        \ 'file': ['*.tmp','*.temp','tags']
                        \}

            noremap <C-P> :<C-U><C-R>=printf("Leaderf file --no-ignore --nameOnly --cword  %s", "")<CR><CR>
            noremap <C-L> :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
            noremap <leader>gc :<C-U><C-R>=printf("Leaderf rg  --bottom --stayOpen --current-buffer -e %s ", expand("<cword>"))<CR>
            noremap <leader>gb :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
            noremap <leader>gl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
            noremap <leader>gf :<C-U><C-R>=printf("Leaderf function %s", "")<CR><CR>
            noremap <leader>gg :<C-U><C-R>=printf("Leaderf gtags --cword %s", "")<CR><CR>
            " Leaderf 不要在popup 中输入文字查找，容易卡死
            noremap <leader>rg :<C-U><C-R>=printf("Leaderf rg --bottom --stayOpen -g !*.temp %s", expand("<cword>"))<CR>
        endif
    " }

    " for deoplete {
        if isdirectory(expand("~/.vim/plugged/deoplete.nvim"))
            let g:deoplete#enable_at_startup = 1
            autocmd FileType go call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
            autocmd FileType php call deoplete#custom#option('ignore_sources', {'php': ['omni']})
        endif
    " }

    " for php complete{
        if g:zz_platform_mask == 2
            "phpcomplete{
               autocmd FileType php set omnifunc=phpcomplete_extended#CompletePHP
			   "jump_to_def_split: <C-W><C-]>
			   "jump_to_def_vsplit: <C-W><C-\>

               " 默认jump_to_def_tabnew: <C-W><C-[> 导致 C-W 上下左右
               " 会执行jump_to_def_tabnew， 所以把此命令改了快捷键
			   let g:phpcomplete_mappings = {
                \    'jump_to_def_tabnew': '<leader>p',
                \}
            "}
        endif

        " phpcd {
        if isdirectory(expand("~/.vim/plugged/phpcd.vim"))
            let g:phpcd_autoload_path = '.autoload.php'
        endif
        "}
        "
        " vim-php-namespace {
            function! IPhpInsertUse()
                call PhpInsertUse()
                call feedkeys('a',  'n')
            endfunction
            "autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
            autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>
        " }
    " }

    " for vim-go {
        if isdirectory(expand("~/.vim/plugged/vim-go"))
            let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
            let g:go_autodetect_gopath = 1
            let g:go_list_type = "quickfix"
            let g:go_version_warning = 1
            let g:go_highlight_types = 1
            let g:go_highlight_fields = 1
            let g:go_highlight_functions = 1
            let g:go_highlight_function_calls = 1
            let g:go_highlight_operators = 1
            let g:go_highlight_extra_types = 1
            let g:go_highlight_methods = 1
            let g:go_highlight_generate_tags = 1
            let g:godef_split=2
            " let g:go_auto_type_info = 1
            "let g:go_auto_sameids = 1
            let g:go_doc_popup_window = 1

            let g:go_gopls_enabled = 1
            let g:go_gopls_complete_unimported = 1

            nnoremap <leader>ss : GoDebugStart
            let g:go_debug_mappings = {
                        \ '(go-debug-continue)': {'key': 'c', 'arguments': '<nowait>'},
                        \ '(go-debug-stop)': {'key': 'q'},
                        \ '(go-debug-next)': {'key': 'n', 'arguments': '<nowait>'},
                        \ '(go-debug-step)': {'key': 's'},
                        \ '(go-debug-breakpoint)': {'key': 'b'},
                        \}
            let g:go_debug_windows = {
                        \ 'vars':       'rightbelow 60vnew',
                        \ 'stack':      'rightbelow 10new',
                        \ }
            "autocmd FileType go set omnifunc=go#complete#Complete
        endif
    " }

    " for clang-complate {
        let g:clang_library_path="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/"
        "let g:clang_auto_select=1
    " }

    " for markdwon {
        " for vmarkdown-preview {
			" set to 1, nvim will open the preview window after entering the markdown buffer
			" default: 0
			let g:mkdp_auto_start = 0
			" set to 1, the nvim will auto close current preview window when change
			" from markdown buffer to another buffer
			" default: 1
			let g:mkdp_auto_close = 1
			" set to 1, the vim will refresh markdown when save the buffer or
			" leave from insert mode, default 0 is auto refresh markdown as you edit or
			" move the cursor
			" default: 0
			let g:mkdp_refresh_slow = 0
			" set to 1, the MarkdownPreview command can be use for all files,
			" by default it can be use in markdown file
			" default: 0
			let g:mkdp_command_for_global = 0
			" set to 1, preview server available to others in your network
			" by default, the server listens on localhost (127.0.0.1)
			" default: 0
			let g:mkdp_open_to_the_world = 0
			" use custom IP to open preview page
			" useful when you work in remote vim and preview on local browser
			" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
			" default empty
			let g:mkdp_open_ip = ''
			" specify browser to open preview page
			" default: ''
			let g:mkdp_browser = ''
			" set to 1, echo preview page url in command line when open preview page
			" default is 0
			let g:mkdp_echo_preview_url = 0
			" a custom vim function name to open preview page
			" this function will receive url as param
			" default is empty
			let g:mkdp_browserfunc = ''
			let g:mkdp_preview_options = {
				\ 'mkit': {},
				\ 'katex': {},
				\ 'uml': {},
				\ 'maid': {},
				\ 'disable_sync_scroll': 0,
				\ 'sync_scroll_type': 'middle',
				\ 'hide_yaml_meta': 1,
				\ 'sequence_diagrams': {},
				\ 'flowchart_diagrams': {},
				\ 'content_editable': v:false,
				\ 'disable_filename': 0
				\ }
			" use a custom markdown style must be absolute path
			" like '/Users/username/markdown.css' or expand('~/markdown.css')
			let g:mkdp_markdown_css = ''
			" use a custom highlight style must absolute path
			" like '/Users/username/highlight.css' or expand('~/highlight.css')
			let g:mkdp_highlight_css = ''
			" use a custom port to start server or random for empty
			let g:mkdp_port = ''
			" preview page title
			" ${name} will be replace with the file name
			let g:mkdp_page_title = '「${name}」'
			" recognized filetypes
			" these filetypes will have MarkdownPreview... commands
			let g:mkdp_filetypes = ['markdown']
        " }
    " }

    " for vim-floaterm {
        if isdirectory(expand("~/.vim/plugged/vim-floaterm"))
            let g:floaterm_autoclose = 1
            let g:floaterm_height = 0.9
            let g:floaterm_width = 0.9

            nnoremap <leader>t :FloatermToggle<CR>
        endif
    " }
" }

" unite.vim {
    let g:unite_source_menu_menus = {}

    " menu prefix key (for all Unite menus)
    nnoremap [menu] <Nop>
    nmap <LocalLeader> [menu]

    let g:unite_source_history_yank_enable = 1
    let g:unite_enable_start_insert = 0
    let g:unite_enable_short_source_mes = 0
    let g:unite_force_overwrite_statusline = 0
    let g:unite_prompt = '>>> '
    let g:unite_marked_icon = '✓'
    let g:unite_candidate_icon = '∘'
    let g:unite_winheight = 15
    let g:unite_update_time = 200
    let g:unite_split_rule = 'botright'
    let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '
    let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '
    let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '

    " unite.vim useful resources:
    " https://github.com/joedicastro/dotfiles/tree/master/vim
    " unite前缀键: LocalLeader=','
    " menus menu
    nnoremap <silent>[menu]m :Unite -silent -winheight=40 menu<CR>
    nnoremap <Leader>? :Unite output:nmap\ \<Leader\><CR>

    " [menu]x : menu.edition {
    let g:unite_source_menu_menus.x = {
                \ 'description' : '    text             ⌘ [menu]x',
                \}
    let g:unite_source_menu_menus.x.command_candidates = [
                \['a = ➞  align-repeat-equal                                  ⌘ <Leader> a =',
                \'Tabularize /^[^=]*\zs='],
                \['s c ➞  cancel-highlight-of-searched-result                 ⌘ <Leader> s c',
                \'nohl'],
                \['t p ➞  toggle-paste-mode                                   ⌘ <Leader> t p',
                \'setlocal paste!'],
                \]
    nnoremap <silent>[menu]x :Unite -silent -winheight=20
                \ menu:x<CR>
    " }

    " [menu]f : menu.files {
    let g:unite_source_menu_menus.f = {
                \ 'description' : '    Unite     ⌘ [menu]f',
                \}
    let g:unite_source_menu_menus.f.command_candidates = [
                \['▷   ➞  Buffers',
                \'Unite buffer'],
                \['▷   ➞  Files',
                \'Unite file'],
                \['▷   ➞  Windows',
                \'Unite window'],
                \['▷   ➞  Maps',
                \'Unite Maps'],
                \]
    nnoremap <silent>[menu]f :Unite -silent -winheight=20
                \ menu:f<CR>
    " }

    " [menu]p : menu.plugins {
    let g:unite_source_menu_menus.p = {
                \ 'description' : '    plugins          ⌘ [menu]s',
                \}
    let g:unite_source_menu_menus.p.command_candidates = [
                \['▷  ➞  syntastic-check                                   (syntastic)',
                \'SyntasticCheck'],
                \['▷  ➞  syntastic-info                                    (syntastic)',
                \'SyntasticInfo'],
                \['▷  ➞  syntastic-reset                                   (syntastic)',
                \'SyntasticReset'],
                \['▷  ➞  syntastic-errors                                  (syntastic)',
                \'Errors'],
                \['▷  ➞  ycm-restart-server                                (youcompleteme)',
                \'YcmRestartServer'],
                \['▷  ➞  generate-markdown-toc                             (vim-markdown-toc)',
                \'GenTocGFM'],
                \]
    nnoremap <silent>[menu]p :Unite -silent
                \ menu:p<CR>
    " }

    " [menu]t : menu.toggle {
    let g:unite_source_menu_menus.t = {
                \ 'description' : '    toggle           ⌘ [menu]t',
                \}
    let g:unite_source_menu_menus.t.command_candidates = [
                \['▷  ➞  nerdtree                                          (plugin)       ⌘ <F3>',
                \'NERDTreeToggle'],
                \['▷  ➞  tagbar                                            (plugin)       ⌘ <F6>',
                \'TagbarToggle'],
                \['▷  ➞  syntastic                                         (plugin)       ⌘',
                \'IndentGuidesToggle'],
                \['▷  ➞  line-numbers                                                     ⌘ <Leader> t n',
                \'call ToggleLineNumber()'],
                \['▷  ➞  linum-relative-toggle                                            ⌘ <Leader> t r',
                \'call ToggleRelativeLineNumber()'],
                \]
    nnoremap <silent>[menu]t :Unite -silent
                \ menu:t<CR>
    " }

    " [menu]u : menu.unite.vim {
    let g:unite_source_menu_menus.u = {
                \ 'description' : '    unite.vim        ⌘ [menu]u',
                \}
    let g:unite_source_menu_menus.u.command_candidates = [
                \['▷  ➞  unite sources',
                \'Unite source'],
                \]
    nnoremap <silent>[menu]u :Unite -silent
                \ menu:u<CR>
    " }

    " [menu]v : menu.vim {
    let g:unite_source_menu_menus.v = {
                \ 'description' : '    vim              ⌘ [menu]v',
                \}
    let g:unite_source_menu_menus.v.command_candidates = [
                \['▷  ➞  vimrc(|)',
                \'vsp $MYVIMRC'],
                \['▷  ➞  vimrc(-)',
                \'sp $MYVIMRC'],
                \['▷  ➞  vimrc.plug.conf(|)',
                \'vsp ~/.vimrc.plug.conf'],
                \['▷  ➞  vimrc.plug.conf(-)',
                \'sp ~/.vimrc.plug.conf'],
                \['▷  ➞  vimrc.plug.list(|)',
                \'vsp ~/.vimrc.plug.list'],
                \['▷  ➞  vimrc.plug.list(-)',
                \'sp ~/.vimrc.plug.list'],
                \['▷  ➞  vim-help',
                \'Unite help -start-insert'],
                \['▷  ➞  vim-commands',
                \'Unite command -start-insert'],
                \['▷  ➞  vim-mappings',
                \'Unite mapping -start-insert'],
                \['▷  ➞  vim-functions',
                \'Unite function -start-insert'],
                \['▷  ➞  vim-runtimepath',
                \'Unite runtimepath -start-insert '],
                \['▷  ➞  vim-command-output',
                \'Unite output'],
                \]
    nnoremap <silent>[menu]v :Unite -silent
                \ menu:v<CR>
    " }

    " [menu]o : menu.other {
    let g:unite_source_menu_menus.o = {
                \ 'description' : '    other                ⌘ [menu]o',
                \}
    let g:unite_source_menu_menus.o.command_candidates = [
                \['▷  ➞  delete line without string',
                \'% g!/pattern/d'],
                \['▷  ➞  delete line with string',
                \'g/pattern/d'],
                \['▷  ➞  delete same line',
                \'g/^\(.\+\)$\n\1/d'],
                \['▷  ➞  find same line',
                \'/^\(.\+\)$\n\1'],
                \['▷  ➞  format json',
                \'%!python -m json.tool'],
                \]
    nnoremap <silent>[menu]o :Unite -silent
                \ menu:o<CR>
    " }
" }

" local Plugins {
    if filereadable(expand("~/.vimrc.plug.conf.local"))
        source ~/.vimrc.plug.conf.local
    endif
" }
